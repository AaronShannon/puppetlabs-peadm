---
name: "Manual smoke test with debugging"

on:
  workflow_dispatch:
    inputs:
      image:
        description: 'GCP image for test cluster'
        required: true
        default: 'centos-7'
      architecture:
        description: 'PE architecture to test'
        required: true
        default: 'standard'
      pe-version:
        description: 'PE version to install'
        required: true
        default: '2019.8.5'

env:
  HONEYCOMB_WRITEKEY: 7f3c63a70eecc61d635917de46bea4e6
  HONEYCOMB_DATASET: litmus tests

jobs:
  smoke-test:
    name: "${{github.event.inputs.architecture}}, ${{github.event.inputs.image}}, PE ${{github.event.inputs.pe-version}}"
    runs-on: ubuntu-20.04
    env:
      BOLT_GEM: true
      BOLT_DISABLE_ANALYTICS: true
      BUILDEVENT_FILE: '../buildevents.txt'
    strategy:
      fail-fast: false

    steps:
      - name: "Honeycomb: Start recording"
        uses: puppetlabs/kvrhdn-gha-buildevents@pdk-templates-v1
        with:
          apikey: ${{ env.HONEYCOMB_WRITEKEY }}
          dataset: ${{ env.HONEYCOMB_DATASET }}
          job-status: ${{ job.status }}

      - name: "Honeycomb: Start first step"
        run: |
          echo STEP_ID=setup-test-cluster >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: "Checkout Source"
        uses: actions/checkout@v2

      - name: "Activate Ruby 2.7"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
          bundler-cache: true

      - name: "Print bundle environment"
        if: ${{ github.repository_owner == 'puppetlabs' }}
        run: |
          echo ::group::bundler environment
            buildevents cmd $TRACE_ID $STEP_ID 'bundle env' -- bundle env
          echo ::endgroup::

      - name: "Honeycomb: Record environment setup time"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Set up environment'
          echo STEP_ID=${{github.event.inputs.architecture}}-${{github.event.inputs.image}}-provision >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: 'Start SSH session'
        uses: luchihoratiu/debug-via-ssh@main
        with:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
          SSH_PASS: ${{ secrets.SSH_PASS }}

      - name: 'Provision test cluster'
        timeout-minutes: 15
        run: |
          echo ::group::=== SPEC PREP ===
            buildevents cmd $TRACE_ID $STEP_ID 'rake spec_prep' -- \
              bundle exec rake spec_prep

          echo ::endgroup::
          echo ::group::=== PROVISION ===
            buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::provision_test_cluster' -- \
              bundle exec bolt plan run peadm_spec::provision_test_cluster \
                --modulepath spec/fixtures/modules \
                provider=provision_service \
                image=${{github.event.inputs.image}} \
                architecture=${{github.event.inputs.architecture}}

          echo ::endgroup::
          echo ::group::=== REQUEST ===
            cat request.json || true; echo

          echo ::endgroup::
          echo ::group::=== INVENTORY ===
            sed -e 's/password: .*/password: "[redacted]"/' < spec/fixtures/litmus_inventory.yaml || true

          echo ::endgroup::

      - name: "Honeycomb: Record provision time"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Provision test cluster'
          echo STEP_ID=${{github.event.inputs.architecture}}-${{github.event.inputs.image}}-install >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: 'Install PE on test cluster'
        timeout-minutes: 120
        run: |
          buildevents cmd $TRACE_ID $STEP_ID 'bolt plan run peadm_spec::install_test_cluster' -- \
            bundle exec bolt plan run peadm_spec::install_test_cluster \
              --inventoryfile spec/fixtures/litmus_inventory.yaml \
              --modulepath spec/fixtures/modules \
              architecture=${{github.event.inputs.architecture}} \
              version=${{github.event.inputs.pe-version}}

      - name: "Honeycomb: Record install time"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Install PE on test cluster'
          echo STEP_ID=${{github.event.inputs.architecture}}-${{github.event.inputs.image}}-tear_down >> $GITHUB_ENV
          echo STEP_START=$(date +%s) >> $GITHUB_ENV

      - name: 'Tear down test cluster'
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if [ -f spec/fixtures/litmus_inventory.yaml ]; then
            buildevents cmd $TRACE_ID $STEP_ID 'rake litmus:tear_down' -- \
              bundle exec rake 'litmus:tear_down'
            echo ::group::=== REQUEST ===
              cat request.json || true; echo
            echo ::endgroup::
          fi

      - name: "Honeycomb: Record tear down time"
        if: ${{ always() }}
        run: |
          buildevents step $TRACE_ID $STEP_ID $STEP_START 'Tear down test cluster'
